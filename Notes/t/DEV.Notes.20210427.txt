

fetchone is working now...

```
üê∞ karl.rink@Karl-MacBook-Pro python % curl --user dbuser:dbpass "127.0.0.1:8980/api/example/table1/2"
[2,"69d0b32a-a780-11eb-9c94-acde48001122",null,"Tue, 27 Apr 2021 10:45:53 GMT"]
üê∞ karl.rink@Karl-MacBook-Pro python % curl --user dbuser:dbpass "127.0.0.1:8980/api/example/table1"          
[["id","int(11)","NO","PRI",null,"auto_increment"],["name","varchar(255)","NO","",null,""],["description","text","YES","",null,""],["created_at","timestamp","NO","","current_timestamp()",""]]
üê∞ karl.rink@Karl-MacBook-Pro python % curl --user dbuser:dbpass "127.0.0.1:8980/api/example/table1/2"
[2,"69d0b32a-a780-11eb-9c94-acde48001122",null,"Tue, 27 Apr 2021 10:45:53 GMT"]
üê∞ karl.rink@Karl-MacBook-Pro python % curl --user dbuser:dbpass "127.0.0.1:8980/api/example/table1/2?fields=name"
["69d0b32a-a780-11eb-9c94-acde48001122"]
```

# DEV.NOTE
# big time name space collision using 'id' and/or '_id'
#{"errorMessage":"get_one() got an unexpected keyword argument 'id'","errorType":"Internal Server Error","status":500}
#@app.route("/api/<db>/<table>/<id>", methods=['GET'])
#    assert _id == request.view_args['id']

used:
#@app.route("/api/<db>/<table>/<int:id>", methods=['GET'])
@app.route("/api/<db>/<table>/<key>", methods=['GET'])
def get_one(db=None, table=None, key=None):
    assert key == request.view_args['key']



#---

flask mysql insert.

- don't forget about mysql auto_increment colmn
- mysql can insert omitting the colmns.  INSERT INTO tbl_name () VALUES(); 
  cursor.execute("INSERT INTO db.table VALUES (%s)", ["foo"])


insert into test (age,name) values(%s,%s)
looks like:
record = [12, 'Tom']
cursor.execute("insert into test (age,name) values(%s,%s)", record)

ah, return last row inserted 
last_id = cursor.lastrowid
and/or



https://dev.mysql.com/doc/refman/8.0/en/insert.html


return error if not db.commit()

def insert(mysql, insertCmd):
     try:
        cursor = mysql.connect().cursor()
        cursor.execute(insertCmd)
        mysql.connect().commit()
        return True
     except Exception as e:
        print("Problem inserting into db: " + str(e))
        return False

https://stackoverflow.com/questions/46997265/how-to-make-this-flask-mysql-insert-commit
So, you have to do the following (no shortcuts):
connection = mysql.connect()
cursor = connection.cursor()
cursor.execute(insertCmd)
connection.commit()

typically...
cur.execute(
    """INSERT INTO 
        login (
            fname,
            lname,
            username,
            password,
            email,
            question,
            answer)
    VALUES (%s,%s,%s,%s,%s,%s,%s,%s)""", (fname, lname, username, password, cpassword, email, selection, answer))
db.commit()
    print "Registered"






---


@app.errorhandler(AuthError)
def handle_auth_error(ex):
    response = jsonify(error=str(ex))
    response.status_code = (ex.code if isinstance(ex, HTTPException) else 500)
    app.logger.error('error AuthError ' + str(ex))
    return response

@app.errorhandler(500)
def server_error(e):
    #logging.exception('An error occurred during a request.')
    app.logger.error('error 500 ' + str(e))
    return """
    An internal error occurred: <pre>{}</pre>
    See logs for full stacktrace.
    """.format(e), 500







