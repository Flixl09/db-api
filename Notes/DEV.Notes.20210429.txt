
https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html

---

connection_timeout

üê∞ krink@KarlMBPro ~ % curl --user dbuser:dbpass -H "X-Host: 192.168.0.1" localhost:8980/api
{"errorMessage":"2003: Can't connect to MySQL server on '192.168.0.1:3306' (60 Operation timed out)","errorType":"InterfaceError","status":512}

üê∞ krink@KarlMBPro ~ % curl --user dbuser:dbpass -H "X-Host: 192.168.0.1" -H "X-Connection-Timeout: 3" localhost:8980/api
{"errorMessage":"2003: Can't connect to MySQL server on '192.168.0.1:3306' (timed out)","errorType":"InterfaceError","status":512}


---

configure mysql.connector via headers...
X-Host: 127.0.0.1
X-Port: 3306

having fun trying to pass bool True|False to curl header -H "X-Pure: False"

---

import mysql.connector
#https://github.com/mysql/mysql-connector-python
#https://dev.mysql.com/doc/connector-python/en/connector-python-example-connecting.html
#pip3 install mysql-connector-python

---

#<class 'AttributeError'>
#'NoneType' object has no attribute 'username'
#AttributeError

#<class 'mysql.connector.errors.InterfaceError'>
#2003: Can't connect to MySQL server on '192.168.0.99:3306' (51 Network is unreachable)
#InterfaceError

#<class 'mysql.connector.errors.InterfaceError'>
#2003: Can't connect to MySQL server on '127.0.0.1:3307' (61 Connection refused)
#InterfaceError

#<class 'pymysql.err.OperationalError'>
#(1054, "Unknown column 'descriptionXXXXX' in 'field list'")

#new driver... mysql.connector (libmysql c client)
#<class 'mysql.connector.errors.ProgrammingError'>
#1045 (28000): Access denied for user 'dbuser'@'localhost' (using password: YES)


---

# Setting use_pure=False causes the connection to use the C Extension 
# https://dev.mysql.com/doc/connector-python/en/connector-python-example-connecting.html
# https://dev.mysql.com/doc/connector-python/en/connector-python-cext.html


#https://www.w3schools.com/python/python_mysql_delete.asp



---

hmmm.  most api limit the return results to 10 or 100 or something...  rather than let the client pull massive rows if exist...

üê∞ karl.rink@Karl-MacBook-Pro db-api % curl --user dbuser:dbpass "127.0.0.1:8980/api/example/table1?q=y"

üê∞ karl.rink@Karl-MacBook-Pro db-api % curl --user dbuser:dbpass "127.0.0.1:8980/api/example/table1?limit=2"


#PATCH  /api/<db>/<table>/:id         # Update row element by primary key (single key/val)
@app.route("/api/<db>/<table>/<key>", methods=['PATCH'])
def patch_one(db=None, table=None, key=None):


    if update == 1:
        #return jsonify(status=204, message="No Content"), 204
        return jsonify(status=201, message="Created", update=True), 201
    else:
        return jsonify(status=465, message="Failed Update", update=False), 465
        #this is 465 when success but nothing to update when column data and update are the same.


---


revisit this later...

#multi-valued key1=val1,key2=val2,etc update
##PATCH  /api/<db>/<table>/:id         # Update row element by primary key
#@app.route("/api/<db>/<table>/<key>", methods=['PATCH'])
#def patch_one(db=None, table=None, key=None):
#
#    assert db == request.view_args['db']
#    assert table == request.view_args['table']
#    assert key == request.view_args['key']
#
#    if not request.headers['Content-Type'] == 'application/json':
#        return jsonify(status=412, errorType="Precondition Failed"), 412
#
#    post = request.get_json()
#
#    colmns=[]
#    values=[]
#    for _key in post:
#        colmns.append(_key+'=?')
#        values.append(post[_key])
#
#    fields = ",".join([str(k) for k in colmns])
#
#    SQL = "UPDATE "+str(db)+"."+str(table)+" SET "+str(fields)+" WHERE id='"+str(key)+"'"
#    print(SQL)
#
#    update = insertsql(SQL, values)
#
#    if update is True:
#        #return jsonify(status=204, message="No Content"), 204
#        return jsonify(status=201, message="Created", update="Success"), 201
#    else:
#        return jsonify(status=465, message="Failed Update"), 465

#cur.execute("UPDATE arp SET data=? WHERE mac=?", (update, mac))
#UPDATE table_name 
#SET column1=value1,column2=value2 
#WHERE condition; 


https://en.wikipedia.org/wiki/Column


https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT







---

1.0.0  

nogroup

Apr 29 18:52:26 develop-db-api systemd[1]: Started Gunicorn instance to serve db-api.
Apr 29 18:52:26 develop-db-api systemd[131206]: db-api.service: Failed to determine group credentials: No such process
Apr 29 18:52:26 develop-db-api systemd[131206]: db-api.service: Failed at step GROUP spawning /opt/db-api/env/bin/gunicorn: No such process
Apr 29 18:52:26 develop-db-api systemd[1]: db-api.service: Main process exited, code=exited, status=216/GROUP
Apr 29 18:52:26 develop-db-api systemd[1]: db-api.service: Failed with result 'exit-code'.


root@develop-db-api:/etc/systemd/system# systemctl daemon-reload
root@develop-db-api:/etc/systemd/system# systemctl start db-api
root@develop-db-api:/etc/systemd/system# curl localhost:8980
{"message":"OK","status":200,"version":"1.0.0"}


root@develop-db-api:~# systemctl enable db-api
Created symlink /etc/systemd/system/multi-user.target.wants/db-api.service ‚Üí /etc/systemd/system/db-api.service.


---

an example user,

create role dbapi;
grant all privileges on example.* to 'dbapi';
grant select on *.* to 'dbapi';
create user 'dbapi' identified by 'dbapi';
grant 'dbapi' to 'dbapi'@'%';
set default role dbapi for 'dbapi'@'%';


---

üê∞ karl.rink@Karl-MacBook-Pro develop-db-api % curl --user dbapi:dbapi -H "X-Host:172.16.2.34" "172.16.2.151:8980/api/main/property_taxonomy?q=true&limit=2,5&fields=id_property_taxonomy,main_category_type"
[[3,"Foreclosures"],[4,"Foreclosures"],[5,"Foreclosures"],[6,"Foreclosures"],[7,"Foreclosures"]]


---

ok, now for nginx,

sudo apt-get install nginx
sudo openssl req -x509 -nodes -days 3650 -newkey rsa:4096 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt


sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048


sudo vi /etc/nginx/snippets/self-signed.conf
ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

sudo vi /etc/nginx/snippets/ssl-params.conf
# from https://cipherli.st/
# and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html

ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
ssl_ecdh_curve secp384r1;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;
ssl_stapling off;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
# Disable preloading HSTS for now.  You can use the commented out header line that includes
# the "preload" directive if you understand the implications.
#add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;

ssl_dhparam /etc/ssl/certs/dhparam.pem;


#

sudo vi  /etc/nginx/sites-enabled/default

server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	listen 443 ssl default_server;
	listen [::]:443 ssl default_server;

	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	include snippets/self-signed.conf;
	include snippets/ssl-params.conf;

	root /var/www/html;
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
            proxy_pass http://127.0.0.1:8980;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}

}




####

# TEST 3.6
karl.rink@develop-mariadb1:/opt/db-api$ virtualenv --python python3.8 env
The path python3.8 (from --python=python3.8) does not exist
karl.rink@develop-mariadb1:/opt/db-api$ python3
Python 3.6.9 (default, Jan 26 2021, 15:33:00) 
[GCC 8.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 

(env) karl.rink@develop-mariadb1:/opt/db-api$ uname -a
Linux develop-mariadb1 5.4.0-1045-aws #47~18.04.1-Ubuntu SMP Tue Apr 13 15:58:14 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux

(env) karl.rink@develop-mariadb1:/opt/db-api$ python3 main.py
 * Serving Flask app "app" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:8980/ (Press CTRL+C to quit)








