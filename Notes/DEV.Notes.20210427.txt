

fetchone is working now...

```
üê∞ karl.rink@Karl-MacBook-Pro python % curl --user dbuser:dbpass "127.0.0.1:8980/api/example/table1/2"
[2,"69d0b32a-a780-11eb-9c94-acde48001122",null,"Tue, 27 Apr 2021 10:45:53 GMT"]
üê∞ karl.rink@Karl-MacBook-Pro python % curl --user dbuser:dbpass "127.0.0.1:8980/api/example/table1"          
[["id","int(11)","NO","PRI",null,"auto_increment"],["name","varchar(255)","NO","",null,""],["description","text","YES","",null,""],["created_at","timestamp","NO","","current_timestamp()",""]]
üê∞ karl.rink@Karl-MacBook-Pro python % curl --user dbuser:dbpass "127.0.0.1:8980/api/example/table1/2"
[2,"69d0b32a-a780-11eb-9c94-acde48001122",null,"Tue, 27 Apr 2021 10:45:53 GMT"]
üê∞ karl.rink@Karl-MacBook-Pro python % curl --user dbuser:dbpass "127.0.0.1:8980/api/example/table1/2?fields=name"
["69d0b32a-a780-11eb-9c94-acde48001122"]
```

# DEV.NOTE
# big time name space collision using 'id' and/or '_id'
#{"errorMessage":"get_one() got an unexpected keyword argument 'id'","errorType":"Internal Server Error","status":500}
#@app.route("/api/<db>/<table>/<id>", methods=['GET'])
#    assert _id == request.view_args['id']

used:
#@app.route("/api/<db>/<table>/<int:id>", methods=['GET'])
@app.route("/api/<db>/<table>/<key>", methods=['GET'])
def get_one(db=None, table=None, key=None):
    assert key == request.view_args['key']






